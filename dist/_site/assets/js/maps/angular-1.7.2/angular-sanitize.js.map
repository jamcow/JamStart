{"version":3,"sources":["angular-1.7.2/angular-sanitize.js"],"names":[],"mappings":"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","file":"../../angular-1.7.2/angular-sanitize.js","sourcesContent":["/**\r\n * @license AngularJS v1.7.2\r\n * (c) 2010-2018 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function (window, angular) {\r\n    'use strict';\r\n\r\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n     *     Any commits to this file should be reviewed with security in mind.  *\r\n     *   Changes to this file can potentially create security vulnerabilities. *\r\n     *          An approval from 2 Core members with history of modifying      *\r\n     *                         this file is required.                          *\r\n     *                                                                         *\r\n     *  Does the change somehow allow for arbitrary javascript to be executed? *\r\n     *    Or allows for someone to change the prototype of built-in objects?   *\r\n     *     Or gives undesired access to variables likes document or window?    *\r\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n    var $sanitizeMinErr = angular.$$minErr('$sanitize');\r\n    var bind;\r\n    var extend;\r\n    var forEach;\r\n    var isArray;\r\n    var isDefined;\r\n    var lowercase;\r\n    var noop;\r\n    var nodeContains;\r\n    var htmlParser;\r\n    var htmlSanitizeWriter;\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name ngSanitize\r\n     * @description\r\n     *\r\n     * The `ngSanitize` module provides functionality to sanitize HTML.\r\n     *\r\n     * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\r\n     */\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name $sanitize\r\n     * @kind function\r\n     *\r\n     * @description\r\n     *   Sanitizes an html string by stripping all potentially dangerous tokens.\r\n     *\r\n     *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\r\n     *   then serialized back to a properly escaped HTML string. This means that no unsafe input can make\r\n     *   it into the returned string.\r\n     *\r\n     *   The whitelist for URL sanitization of attribute values is configured using the functions\r\n     *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link $compileProvider}.\r\n     *\r\n     *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.\r\n     *\r\n     * @param {string} html HTML input.\r\n     * @returns {string} Sanitized HTML.\r\n     *\r\n     * @example\r\n       <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\" name=\"sanitize-service\">\r\n       <file name=\"index.html\">\r\n         <script>\r\n             angular.module('sanitizeExample', ['ngSanitize'])\r\n               .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\r\n                 $scope.snippet =\r\n                   '<p style=\"color:blue\">an html\\n' +\r\n                   '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\r\n                   'snippet</p>';\r\n                 $scope.deliberatelyTrustDangerousSnippet = function() {\r\n                   return $sce.trustAsHtml($scope.snippet);\r\n                 };\r\n               }]);\r\n         </script>\r\n         <div ng-controller=\"ExampleController\">\r\n            Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\r\n           <table>\r\n             <tr>\r\n               <td>Directive</td>\r\n               <td>How</td>\r\n               <td>Source</td>\r\n               <td>Rendered</td>\r\n             </tr>\r\n             <tr id=\"bind-html-with-sanitize\">\r\n               <td>ng-bind-html</td>\r\n               <td>Automatically uses $sanitize</td>\r\n               <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\r\n               <td><div ng-bind-html=\"snippet\"></div></td>\r\n             </tr>\r\n             <tr id=\"bind-html-with-trust\">\r\n               <td>ng-bind-html</td>\r\n               <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\r\n               <td>\r\n               <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\r\n    &lt;/div&gt;</pre>\r\n               </td>\r\n               <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\r\n             </tr>\r\n             <tr id=\"bind-default\">\r\n               <td>ng-bind</td>\r\n               <td>Automatically escapes</td>\r\n               <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\r\n               <td><div ng-bind=\"snippet\"></div></td>\r\n             </tr>\r\n           </table>\r\n           </div>\r\n       </file>\r\n       <file name=\"protractor.js\" type=\"protractor\">\r\n         it('should sanitize the html snippet by default', function() {\r\n           expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).\r\n             toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\r\n         });\r\n    \r\n         it('should inline raw snippet if bound to a trusted value', function() {\r\n           expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).\r\n             toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\r\n                  \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\r\n                  \"snippet</p>\");\r\n         });\r\n    \r\n         it('should escape snippet without any filter', function() {\r\n           expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).\r\n             toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\r\n                  \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\r\n                  \"snippet&lt;/p&gt;\");\r\n         });\r\n    \r\n         it('should update', function() {\r\n           element(by.model('snippet')).clear();\r\n           element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\r\n           expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).\r\n             toBe('new <b>text</b>');\r\n           expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(\r\n             'new <b onclick=\"alert(1)\">text</b>');\r\n           expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(\r\n             \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\r\n         });\r\n       </file>\r\n       </example>\r\n     */\r\n\r\n\r\n    /**\r\n     * @ngdoc provider\r\n     * @name $sanitizeProvider\r\n     * @this\r\n     *\r\n     * @description\r\n     * Creates and configures {@link $sanitize} instance.\r\n     */\r\n    function $SanitizeProvider() {\r\n        var hasBeenInstantiated = false;\r\n        var svgEnabled = false;\r\n\r\n        this.$get = ['$$sanitizeUri', function ($$sanitizeUri) {\r\n            hasBeenInstantiated = true;\r\n            if (svgEnabled) {\r\n                extend(validElements, svgElements);\r\n            }\r\n            return function (html) {\r\n                var buf = [];\r\n                htmlParser(html, htmlSanitizeWriter(buf, function (uri, isImage) {\r\n                    return !/^unsafe:/.test($$sanitizeUri(uri, isImage));\r\n                }));\r\n                return buf.join('');\r\n            };\r\n        }];\r\n\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $sanitizeProvider#enableSvg\r\n         * @kind function\r\n         *\r\n         * @description\r\n         * Enables a subset of svg to be supported by the sanitizer.\r\n         *\r\n         * <div class=\"alert alert-warning\">\r\n         *   <p>By enabling this setting without taking other precautions, you might expose your\r\n         *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned\r\n         *   outside of the containing element and be rendered over other elements on the page (e.g. a login\r\n         *   link). Such behavior can then result in phishing incidents.</p>\r\n         *\r\n         *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg\r\n         *   tags within the sanitized content:</p>\r\n         *\r\n         *   <br>\r\n         *\r\n         *   <pre><code>\r\n         *   .rootOfTheIncludedContent svg {\r\n         *     overflow: hidden !important;\r\n         *   }\r\n         *   </code></pre>\r\n         * </div>\r\n         *\r\n         * @param {boolean=} flag Enable or disable SVG support in the sanitizer.\r\n         * @returns {boolean|$sanitizeProvider} Returns the currently configured value if called\r\n         *    without an argument or self for chaining otherwise.\r\n         */\r\n        this.enableSvg = function (enableSvg) {\r\n            if (isDefined(enableSvg)) {\r\n                svgEnabled = enableSvg;\r\n                return this;\r\n            } else {\r\n                return svgEnabled;\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $sanitizeProvider#addValidElements\r\n         * @kind function\r\n         *\r\n         * @description\r\n         * Extends the built-in lists of valid HTML/SVG elements, i.e. elements that are considered safe\r\n         * and are not stripped off during sanitization. You can extend the following lists of elements:\r\n         *\r\n         * - `htmlElements`: A list of elements (tag names) to extend the current list of safe HTML\r\n         *   elements. HTML elements considered safe will not be removed during sanitization. All other\r\n         *   elements will be stripped off.\r\n         *\r\n         * - `htmlVoidElements`: This is similar to `htmlElements`, but marks the elements as\r\n         *   \"void elements\" (similar to HTML\r\n         *   [void elements](https://rawgit.com/w3c/html/html5.1-2/single-page.html#void-elements)). These\r\n         *   elements have no end tag and cannot have content.\r\n         *\r\n         * - `svgElements`: This is similar to `htmlElements`, but for SVG elements. This list is only\r\n         *   taken into account if SVG is {@link ngSanitize.$sanitizeProvider#enableSvg enabled} for\r\n         *   `$sanitize`.\r\n         *\r\n         * <div class=\"alert alert-info\">\r\n         *   This method must be called during the {@link angular.Module#config config} phase. Once the\r\n         *   `$sanitize` service has been instantiated, this method has no effect.\r\n         * </div>\r\n         *\r\n         * <div class=\"alert alert-warning\">\r\n         *   Keep in mind that extending the built-in lists of elements may expose your app to XSS or\r\n         *   other vulnerabilities. Be very mindful of the elements you add.\r\n         * </div>\r\n         *\r\n         * @param {Array<String>|Object} elements - A list of valid HTML elements or an object with one or\r\n         *   more of the following properties:\r\n         *   - **htmlElements** - `{Array<String>}` - A list of elements to extend the current list of\r\n         *     HTML elements.\r\n         *   - **htmlVoidElements** - `{Array<String>}` - A list of elements to extend the current list of\r\n         *     void HTML elements; i.e. elements that do not have an end tag.\r\n         *   - **svgElements** - `{Array<String>}` - A list of elements to extend the current list of SVG\r\n         *     elements. The list of SVG elements is only taken into account if SVG is\r\n         *     {@link ngSanitize.$sanitizeProvider#enableSvg enabled} for `$sanitize`.\r\n         *\r\n         * Passing an array (`[...]`) is equivalent to passing `{htmlElements: [...]}`.\r\n         *\r\n         * @return {$sanitizeProvider} Returns self for chaining.\r\n         */\r\n        this.addValidElements = function (elements) {\r\n            if (!hasBeenInstantiated) {\r\n                if (isArray(elements)) {\r\n                    elements = { htmlElements: elements };\r\n                }\r\n\r\n                addElementsTo(svgElements, elements.svgElements);\r\n                addElementsTo(voidElements, elements.htmlVoidElements);\r\n                addElementsTo(validElements, elements.htmlVoidElements);\r\n                addElementsTo(validElements, elements.htmlElements);\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $sanitizeProvider#addValidAttrs\r\n         * @kind function\r\n         *\r\n         * @description\r\n         * Extends the built-in list of valid attributes, i.e. attributes that are considered safe and are\r\n         * not stripped off during sanitization.\r\n         *\r\n         * **Note**:\r\n         * The new attributes will not be treated as URI attributes, which means their values will not be\r\n         * sanitized as URIs using `$compileProvider`'s\r\n         * {@link ng.$compileProvider#aHrefSanitizationWhitelist aHrefSanitizationWhitelist} and\r\n         * {@link ng.$compileProvider#imgSrcSanitizationWhitelist imgSrcSanitizationWhitelist}.\r\n         *\r\n         * <div class=\"alert alert-info\">\r\n         *   This method must be called during the {@link angular.Module#config config} phase. Once the\r\n         *   `$sanitize` service has been instantiated, this method has no effect.\r\n         * </div>\r\n         *\r\n         * <div class=\"alert alert-warning\">\r\n         *   Keep in mind that extending the built-in list of attributes may expose your app to XSS or\r\n         *   other vulnerabilities. Be very mindful of the attributes you add.\r\n         * </div>\r\n         *\r\n         * @param {Array<String>} attrs - A list of valid attributes.\r\n         *\r\n         * @returns {$sanitizeProvider} Returns self for chaining.\r\n         */\r\n        this.addValidAttrs = function (attrs) {\r\n            if (!hasBeenInstantiated) {\r\n                extend(validAttrs, arrayToMap(attrs, true));\r\n            }\r\n            return this;\r\n        };\r\n\r\n        //////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // Private stuff\r\n        //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        bind = angular.bind;\r\n        extend = angular.extend;\r\n        forEach = angular.forEach;\r\n        isArray = angular.isArray;\r\n        isDefined = angular.isDefined;\r\n        lowercase = angular.$$lowercase;\r\n        noop = angular.noop;\r\n\r\n        htmlParser = htmlParserImpl;\r\n        htmlSanitizeWriter = htmlSanitizeWriterImpl;\r\n\r\n        nodeContains = window.Node.prototype.contains || /** @this */ function (arg) {\r\n            // eslint-disable-next-line no-bitwise\r\n            return !!(this.compareDocumentPosition(arg) & 16);\r\n        };\r\n\r\n        // Regular Expressions for parsing tags and attributes\r\n        var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\r\n          // Match everything outside of normal chars and \" (quote character)\r\n          NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;\r\n\r\n\r\n        // Good source of info about elements and attributes\r\n        // http://dev.w3.org/html5/spec/Overview.html#semantics\r\n        // http://simon.html5.org/html-elements\r\n\r\n        // Safe Void Elements - HTML5\r\n        // http://dev.w3.org/html5/spec/Overview.html#void-elements\r\n        var voidElements = stringToMap('area,br,col,hr,img,wbr');\r\n\r\n        // Elements that you can, intentionally, leave open (and which close themselves)\r\n        // http://dev.w3.org/html5/spec/Overview.html#optional-tags\r\n        var optionalEndTagBlockElements = stringToMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),\r\n            optionalEndTagInlineElements = stringToMap('rp,rt'),\r\n            optionalEndTagElements = extend({},\r\n                                                    optionalEndTagInlineElements,\r\n                                                    optionalEndTagBlockElements);\r\n\r\n        // Safe Block Elements - HTML5\r\n        var blockElements = extend({}, optionalEndTagBlockElements, stringToMap('address,article,' +\r\n                'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\r\n                'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul'));\r\n\r\n        // Inline Elements - HTML5\r\n        var inlineElements = extend({}, optionalEndTagInlineElements, stringToMap('a,abbr,acronym,b,' +\r\n                'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' +\r\n                'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));\r\n\r\n        // SVG Elements\r\n        // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\r\n        // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.\r\n        // They can potentially allow for arbitrary javascript to be executed. See #11290\r\n        var svgElements = stringToMap('circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' +\r\n                'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' +\r\n                'radialGradient,rect,stop,svg,switch,text,title,tspan');\r\n\r\n        // Blocked Elements (will be stripped)\r\n        var blockedElements = stringToMap('script,style');\r\n\r\n        var validElements = extend({},\r\n                                           voidElements,\r\n                                           blockElements,\r\n                                           inlineElements,\r\n                                           optionalEndTagElements);\r\n\r\n        //Attributes that have href and hence need to be sanitized\r\n        var uriAttrs = stringToMap('background,cite,href,longdesc,src,xlink:href,xml:base');\r\n\r\n        var htmlAttrs = stringToMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\r\n            'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\r\n            'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\r\n            'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +\r\n            'valign,value,vspace,width');\r\n\r\n        // SVG attributes (without \"id\" and \"name\" attributes)\r\n        // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\r\n        var svgAttrs = stringToMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\r\n            'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +\r\n            'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +\r\n            'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +\r\n            'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +\r\n            'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +\r\n            'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +\r\n            'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +\r\n            'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +\r\n            'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +\r\n            'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +\r\n            'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +\r\n            'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +\r\n            'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +\r\n            'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);\r\n\r\n        var validAttrs = extend({},\r\n                                        uriAttrs,\r\n                                        svgAttrs,\r\n                                        htmlAttrs);\r\n\r\n        function stringToMap(str, lowercaseKeys) {\r\n            return arrayToMap(str.split(','), lowercaseKeys);\r\n        }\r\n\r\n        function arrayToMap(items, lowercaseKeys) {\r\n            var obj = {}, i;\r\n            for (i = 0; i < items.length; i++) {\r\n                obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;\r\n            }\r\n            return obj;\r\n        }\r\n\r\n        function addElementsTo(elementsMap, newElements) {\r\n            if (newElements && newElements.length) {\r\n                extend(elementsMap, arrayToMap(newElements));\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Create an inert document that contains the dirty HTML that needs sanitizing\r\n         * Depending upon browser support we use one of three strategies for doing this.\r\n         * Support: Safari 10.x -> XHR strategy\r\n         * Support: Firefox -> DomParser strategy\r\n         */\r\n        var getInertBodyElement /* function(html: string): HTMLBodyElement */ = (function (window, document) {\r\n            var inertDocument;\r\n            if (document && document.implementation) {\r\n                inertDocument = document.implementation.createHTMLDocument('inert');\r\n            } else {\r\n                throw $sanitizeMinErr('noinert', 'Can\\'t create an inert html document');\r\n            }\r\n            var inertBodyElement = (inertDocument.documentElement || inertDocument.getDocumentElement()).querySelector('body');\r\n\r\n            // Check for the Safari 10.1 bug - which allows JS to run inside the SVG G element\r\n            inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\r\n            if (!inertBodyElement.querySelector('svg')) {\r\n                return getInertBodyElement_XHR;\r\n            } else {\r\n                // Check for the Firefox bug - which prevents the inner img JS from being sanitized\r\n                inertBodyElement.innerHTML = '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\r\n                if (inertBodyElement.querySelector('svg img')) {\r\n                    return getInertBodyElement_DOMParser;\r\n                } else {\r\n                    return getInertBodyElement_InertDocument;\r\n                }\r\n            }\r\n\r\n            function getInertBodyElement_XHR(html) {\r\n                // We add this dummy element to ensure that the rest of the content is parsed as expected\r\n                // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.\r\n                html = '<remove></remove>' + html;\r\n                try {\r\n                    html = encodeURI(html);\r\n                } catch (e) {\r\n                    return undefined;\r\n                }\r\n                var xhr = new window.XMLHttpRequest();\r\n                xhr.responseType = 'document';\r\n                xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\r\n                xhr.send(null);\r\n                var body = xhr.response.body;\r\n                body.firstChild.remove();\r\n                return body;\r\n            }\r\n\r\n            function getInertBodyElement_DOMParser(html) {\r\n                // We add this dummy element to ensure that the rest of the content is parsed as expected\r\n                // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.\r\n                html = '<remove></remove>' + html;\r\n                try {\r\n                    var body = new window.DOMParser().parseFromString(html, 'text/html').body;\r\n                    body.firstChild.remove();\r\n                    return body;\r\n                } catch (e) {\r\n                    return undefined;\r\n                }\r\n            }\r\n\r\n            function getInertBodyElement_InertDocument(html) {\r\n                inertBodyElement.innerHTML = html;\r\n\r\n                // Support: IE 9-11 only\r\n                // strip custom-namespaced attributes on IE<=11\r\n                if (document.documentMode) {\r\n                    stripCustomNsAttrs(inertBodyElement);\r\n                }\r\n\r\n                return inertBodyElement;\r\n            }\r\n        })(window, window.document);\r\n\r\n        /**\r\n         * @example\r\n         * htmlParser(htmlString, {\r\n         *     start: function(tag, attrs) {},\r\n         *     end: function(tag) {},\r\n         *     chars: function(text) {},\r\n         *     comment: function(text) {}\r\n         * });\r\n         *\r\n         * @param {string} html string\r\n         * @param {object} handler\r\n         */\r\n        function htmlParserImpl(html, handler) {\r\n            if (html === null || html === undefined) {\r\n                html = '';\r\n            } else if (typeof html !== 'string') {\r\n                html = '' + html;\r\n            }\r\n\r\n            var inertBodyElement = getInertBodyElement(html);\r\n            if (!inertBodyElement) return '';\r\n\r\n            //mXSS protection\r\n            var mXSSAttempts = 5;\r\n            do {\r\n                if (mXSSAttempts === 0) {\r\n                    throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable');\r\n                }\r\n                mXSSAttempts--;\r\n\r\n                // trigger mXSS if it is going to happen by reading and writing the innerHTML\r\n                html = inertBodyElement.innerHTML;\r\n                inertBodyElement = getInertBodyElement(html);\r\n            } while (html !== inertBodyElement.innerHTML);\r\n\r\n            var node = inertBodyElement.firstChild;\r\n            while (node) {\r\n                switch (node.nodeType) {\r\n                    case 1: // ELEMENT_NODE\r\n                        handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));\r\n                        break;\r\n                    case 3: // TEXT NODE\r\n                        handler.chars(node.textContent);\r\n                        break;\r\n                }\r\n\r\n                var nextNode;\r\n                if (!(nextNode = node.firstChild)) {\r\n                    if (node.nodeType === 1) {\r\n                        handler.end(node.nodeName.toLowerCase());\r\n                    }\r\n                    nextNode = getNonDescendant('nextSibling', node);\r\n                    if (!nextNode) {\r\n                        while (nextNode == null) {\r\n                            node = getNonDescendant('parentNode', node);\r\n                            if (node === inertBodyElement) break;\r\n                            nextNode = getNonDescendant('nextSibling', node);\r\n                            if (node.nodeType === 1) {\r\n                                handler.end(node.nodeName.toLowerCase());\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                node = nextNode;\r\n            }\r\n\r\n            while ((node = inertBodyElement.firstChild)) {\r\n                inertBodyElement.removeChild(node);\r\n            }\r\n        }\r\n\r\n        function attrToMap(attrs) {\r\n            var map = {};\r\n            for (var i = 0, ii = attrs.length; i < ii; i++) {\r\n                var attr = attrs[i];\r\n                map[attr.name] = attr.value;\r\n            }\r\n            return map;\r\n        }\r\n\r\n\r\n        /**\r\n         * Escapes all potentially dangerous characters, so that the\r\n         * resulting string can be safely inserted into attribute or\r\n         * element text.\r\n         * @param value\r\n         * @returns {string} escaped text\r\n         */\r\n        function encodeEntities(value) {\r\n            return value.\r\n              replace(/&/g, '&amp;').\r\n              replace(SURROGATE_PAIR_REGEXP, function (value) {\r\n                  var hi = value.charCodeAt(0);\r\n                  var low = value.charCodeAt(1);\r\n                  return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\r\n              }).\r\n              replace(NON_ALPHANUMERIC_REGEXP, function (value) {\r\n                  return '&#' + value.charCodeAt(0) + ';';\r\n              }).\r\n              replace(/</g, '&lt;').\r\n              replace(/>/g, '&gt;');\r\n        }\r\n\r\n        /**\r\n         * create an HTML/XML writer which writes to buffer\r\n         * @param {Array} buf use buf.join('') to get out sanitized html string\r\n         * @returns {object} in the form of {\r\n         *     start: function(tag, attrs) {},\r\n         *     end: function(tag) {},\r\n         *     chars: function(text) {},\r\n         *     comment: function(text) {}\r\n         * }\r\n         */\r\n        function htmlSanitizeWriterImpl(buf, uriValidator) {\r\n            var ignoreCurrentElement = false;\r\n            var out = bind(buf, buf.push);\r\n            return {\r\n                start: function (tag, attrs) {\r\n                    tag = lowercase(tag);\r\n                    if (!ignoreCurrentElement && blockedElements[tag]) {\r\n                        ignoreCurrentElement = tag;\r\n                    }\r\n                    if (!ignoreCurrentElement && validElements[tag] === true) {\r\n                        out('<');\r\n                        out(tag);\r\n                        forEach(attrs, function (value, key) {\r\n                            var lkey = lowercase(key);\r\n                            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\r\n                            if (validAttrs[lkey] === true &&\r\n                              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\r\n                                out(' ');\r\n                                out(key);\r\n                                out('=\"');\r\n                                out(encodeEntities(value));\r\n                                out('\"');\r\n                            }\r\n                        });\r\n                        out('>');\r\n                    }\r\n                },\r\n                end: function (tag) {\r\n                    tag = lowercase(tag);\r\n                    if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {\r\n                        out('</');\r\n                        out(tag);\r\n                        out('>');\r\n                    }\r\n                    // eslint-disable-next-line eqeqeq\r\n                    if (tag == ignoreCurrentElement) {\r\n                        ignoreCurrentElement = false;\r\n                    }\r\n                },\r\n                chars: function (chars) {\r\n                    if (!ignoreCurrentElement) {\r\n                        out(encodeEntities(chars));\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        /**\r\n         * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare\r\n         * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want\r\n         * to allow any of these custom attributes. This method strips them all.\r\n         *\r\n         * @param node Root element to process\r\n         */\r\n        function stripCustomNsAttrs(node) {\r\n            while (node) {\r\n                if (node.nodeType === window.Node.ELEMENT_NODE) {\r\n                    var attrs = node.attributes;\r\n                    for (var i = 0, l = attrs.length; i < l; i++) {\r\n                        var attrNode = attrs[i];\r\n                        var attrName = attrNode.name.toLowerCase();\r\n                        if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {\r\n                            node.removeAttributeNode(attrNode);\r\n                            i--;\r\n                            l--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var nextNode = node.firstChild;\r\n                if (nextNode) {\r\n                    stripCustomNsAttrs(nextNode);\r\n                }\r\n\r\n                node = getNonDescendant('nextSibling', node);\r\n            }\r\n        }\r\n\r\n        function getNonDescendant(propName, node) {\r\n            // An element is clobbered if its `propName` property points to one of its descendants\r\n            var nextNode = node[propName];\r\n            if (nextNode && nodeContains.call(node, nextNode)) {\r\n                throw $sanitizeMinErr('elclob', 'Failed to sanitize html because the element is clobbered: {0}', node.outerHTML || node.outerText);\r\n            }\r\n            return nextNode;\r\n        }\r\n    }\r\n\r\n    function sanitizeText(chars) {\r\n        var buf = [];\r\n        var writer = htmlSanitizeWriter(buf, noop);\r\n        writer.chars(chars);\r\n        return buf.join('');\r\n    }\r\n\r\n\r\n    // define ngSanitize module and register $sanitize service\r\n    angular.module('ngSanitize', [])\r\n      .provider('$sanitize', $SanitizeProvider)\r\n      .info({ angularVersion: '1.7.2' });\r\n\r\n    /**\r\n     * @ngdoc filter\r\n     * @name linky\r\n     * @kind function\r\n     *\r\n     * @description\r\n     * Finds links in text input and turns them into html links. Supports `http/https/ftp/sftp/mailto` and\r\n     * plain email address links.\r\n     *\r\n     * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\r\n     *\r\n     * @param {string} text Input text.\r\n     * @param {string} [target] Window (`_blank|_self|_parent|_top`) or named frame to open links in.\r\n     * @param {object|function(url)} [attributes] Add custom attributes to the link element.\r\n     *\r\n     *    Can be one of:\r\n     *\r\n     *    - `object`: A map of attributes\r\n     *    - `function`: Takes the url as a parameter and returns a map of attributes\r\n     *\r\n     *    If the map of attributes contains a value for `target`, it overrides the value of\r\n     *    the target parameter.\r\n     *\r\n     *\r\n     * @returns {string} Html-linkified and {@link $sanitize sanitized} text.\r\n     *\r\n     * @usage\r\n       <span ng-bind-html=\"linky_expression | linky\"></span>\r\n     *\r\n     * @example\r\n       <example module=\"linkyExample\" deps=\"angular-sanitize.js\" name=\"linky-filter\">\r\n         <file name=\"index.html\">\r\n           <div ng-controller=\"ExampleController\">\r\n           Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\r\n           <table>\r\n             <tr>\r\n               <th>Filter</th>\r\n               <th>Source</th>\r\n               <th>Rendered</th>\r\n             </tr>\r\n             <tr id=\"linky-filter\">\r\n               <td>linky filter</td>\r\n               <td>\r\n                 <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\r\n               </td>\r\n               <td>\r\n                 <div ng-bind-html=\"snippet | linky\"></div>\r\n               </td>\r\n             </tr>\r\n             <tr id=\"linky-target\">\r\n              <td>linky target</td>\r\n              <td>\r\n                <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\r\n              </td>\r\n              <td>\r\n                <div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"></div>\r\n              </td>\r\n             </tr>\r\n             <tr id=\"linky-custom-attributes\">\r\n              <td>linky custom attributes</td>\r\n              <td>\r\n                <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"&gt;<br>&lt;/div&gt;</pre>\r\n              </td>\r\n              <td>\r\n                <div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"></div>\r\n              </td>\r\n             </tr>\r\n             <tr id=\"escaped-html\">\r\n               <td>no filter</td>\r\n               <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\r\n               <td><div ng-bind=\"snippet\"></div></td>\r\n             </tr>\r\n           </table>\r\n         </file>\r\n         <file name=\"script.js\">\r\n           angular.module('linkyExample', ['ngSanitize'])\r\n             .controller('ExampleController', ['$scope', function($scope) {\r\n               $scope.snippet =\r\n                 'Pretty text with some links:\\n' +\r\n                 'http://angularjs.org/,\\n' +\r\n                 'mailto:us@somewhere.org,\\n' +\r\n                 'another@somewhere.org,\\n' +\r\n                 'and one more: ftp://127.0.0.1/.';\r\n               $scope.snippetWithSingleURL = 'http://angularjs.org/';\r\n             }]);\r\n         </file>\r\n         <file name=\"protractor.js\" type=\"protractor\">\r\n           it('should linkify the snippet with urls', function() {\r\n             expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\r\n                 toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\r\n                      'another@somewhere.org, and one more: ftp://127.0.0.1/.');\r\n             expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\r\n           });\r\n    \r\n           it('should not linkify snippet without the linky filter', function() {\r\n             expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\r\n                 toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\r\n                      'another@somewhere.org, and one more: ftp://127.0.0.1/.');\r\n             expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\r\n           });\r\n    \r\n           it('should update', function() {\r\n             element(by.model('snippet')).clear();\r\n             element(by.model('snippet')).sendKeys('new http://link.');\r\n             expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\r\n                 toBe('new http://link.');\r\n             expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\r\n             expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\r\n                 .toBe('new http://link.');\r\n           });\r\n    \r\n           it('should work with the target property', function() {\r\n            expect(element(by.id('linky-target')).\r\n                element(by.binding(\"snippetWithSingleURL | linky:'_blank'\")).getText()).\r\n                toBe('http://angularjs.org/');\r\n            expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\r\n           });\r\n    \r\n           it('should optionally add custom attributes', function() {\r\n            expect(element(by.id('linky-custom-attributes')).\r\n                element(by.binding(\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\")).getText()).\r\n                toBe('http://angularjs.org/');\r\n            expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');\r\n           });\r\n         </file>\r\n       </example>\r\n     */\r\n    angular.module('ngSanitize').filter('linky', ['$sanitize', function ($sanitize) {\r\n        var LINKY_URL_REGEXP =\r\n              /((s?ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,\r\n            MAILTO_REGEXP = /^mailto:/i;\r\n\r\n        var linkyMinErr = angular.$$minErr('linky');\r\n        var isDefined = angular.isDefined;\r\n        var isFunction = angular.isFunction;\r\n        var isObject = angular.isObject;\r\n        var isString = angular.isString;\r\n\r\n        return function (text, target, attributes) {\r\n            if (text == null || text === '') return text;\r\n            if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);\r\n\r\n            var attributesFn =\r\n              isFunction(attributes) ? attributes :\r\n              isObject(attributes) ? function getAttributesObject() { return attributes; } :\r\n              function getEmptyAttributesObject() { return {}; };\r\n\r\n            var match;\r\n            var raw = text;\r\n            var html = [];\r\n            var url;\r\n            var i;\r\n            while ((match = raw.match(LINKY_URL_REGEXP))) {\r\n                // We can not end in these as they are sometimes found at the end of the sentence\r\n                url = match[0];\r\n                // if we did not match ftp/http/www/mailto then assume mailto\r\n                if (!match[2] && !match[4]) {\r\n                    url = (match[3] ? 'http://' : 'mailto:') + url;\r\n                }\r\n                i = match.index;\r\n                addText(raw.substr(0, i));\r\n                addLink(url, match[0].replace(MAILTO_REGEXP, ''));\r\n                raw = raw.substring(i + match[0].length);\r\n            }\r\n            addText(raw);\r\n            return $sanitize(html.join(''));\r\n\r\n            function addText(text) {\r\n                if (!text) {\r\n                    return;\r\n                }\r\n                html.push(sanitizeText(text));\r\n            }\r\n\r\n            function addLink(url, text) {\r\n                var key, linkAttributes = attributesFn(url);\r\n                html.push('<a ');\r\n\r\n                for (key in linkAttributes) {\r\n                    html.push(key + '=\"' + linkAttributes[key] + '\" ');\r\n                }\r\n\r\n                if (isDefined(target) && !('target' in linkAttributes)) {\r\n                    html.push('target=\"',\r\n                              target,\r\n                              '\" ');\r\n                }\r\n                html.push('href=\"',\r\n                          url.replace(/\"/g, '&quot;'),\r\n                          '\">');\r\n                addText(text);\r\n                html.push('</a>');\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n})(window, window.angular);"]}