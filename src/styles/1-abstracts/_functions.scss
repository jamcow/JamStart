/// <reference path="../main.scss" />

//// Functions
/// @group Abstracts

/// Include Media - converts defined breakpoints map from px to em
@function im-to-em($breakpoints, $base-value: 16px) {
    $new-breakpoints: ();

    @each $name, $value in $breakpoints {
        $em-value: ($value / $base-value) * 1em;
        $new-breakpoints: map-merge($new-breakpoints, ($name: $em-value));
    }

    @return $new-breakpoints;
}

/// Returns px value from number
@function px($value) {
    @if is-number($value) and $value != 0 {
        @return ceil($value) * 1px;
    }

    // Used primarily for Margins and Paddings
    @else if $value == 0 or $value == "auto" {
        @return $value;

        // @warn "Value was `auto` or `0` while converting to PX";
    }

    @else {
        @error "Value was not a number or zero while converting to PX: `#{$value}`";
    }
}

/// Add unit
@function add-unit($value, $unit:"em") {
    @if unitless($value) and $value != 0 {
        @return (($value) * 1#{$unit});
    }

    // Used primarily for Margins and Paddings
    @else if $value == 0 or $value == "auto" {
        @return $value;

        // @warn "Value was `auto` or `0` while converting to EM";
    }

    @else {
        @error "Value was `#{$value}` not a number, zero or auto while adding unit";
    }
}

/// Add em unit
@function add-em($value) {
    @return add-unit($value, "em");
}

/// Add px unit
@function add-px($value) {
    @return add-unit($value, "px");
}

/// Returns em value from number
@function em($value, $font-size: $TYPE-FontSize) {
    @if is-number($value) and $value != 0 {
        @return ($value / $font-size) * 1em;
    }

    // Used primarily for Margins and Paddings
    @else if $value == 0 or $value == "auto" {
        @return $value;

        // @warn "Value was `auto` or `0` while converting to EM";
    }

    @else {
        @error "Value was `#{$value}` not a number, zero or auto while converting to REM";
    }
}

/// Returns rem value from number
@function rem($value, $font-size: $TYPE-FontSize) {
    @if is-number($value) and $value != 0 {
        @return ($value / $font-size) * 1rem;
    }

    @else if $value == 0 {
        @return 0;

        // @warn "Value was `zero` while converting to REM";
    }

    @else if $value == "auto" {
        @return $value;

        // @warn "Value was `auto` while converting to REM";
    }

    @else {
        @error "Value was `#{$value}` not a number, zero or auto while converting to REM";
    }
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

/// Convert px to rem value (keeping units)
/// px2rem(27px) = 1.6875rem
@function px2rem($value) {
    @return rem(strip-unit($value));
}

/// Convert em to pixel value
@function em2px($target, $context: 16) {
    @if $target == 0 {
        @return 0;
    }

    @return ceil(strip-unit($target) * px(strip-unit($context)));
}

/// Convert em to unitless pixel value
@function em2unitlesspx($emvalue, $context: 16) {
    @if $emvalue == 0 {
        @return 0;
    }

    @return ceil(strip-unit($emvalue) * strip-unit($context));
}

/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map_deep_get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }

    @return $map;
}

/// Test if map got all `$keys` nested with each others
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Bool}
@function map_has_nested_keys($map, $keys...) {
    @each $key in $keys {
        @if not map-has-key($map, $key) {
            @return false;
        }
        $map: map-get($map, $key);
    }

    @return true;
}

/// Get corresponding colour values based on a colour theme name, element and property (3 parameters).
/// @example theme3(highcontrast, button, bg)
/// @return {#cc000}
@function theme3($scheme, $element: "link", $property: "bg", $schemer: $colourscheme3) {
    @return map_deep_get($schemer, $scheme, $element, $property);
}

/// Get corresponding colour values based on a colour theme name and property (2 parameters).
/// @example theme(highcontrast, color)
/// @return {#cc000}
@function theme($scheme, $property: "primary", $schemer: $BODY-Themes) {
    @return map_deep_get($schemer, $scheme, $property);
}

/// Take a list of values, add to a Map keeping their units (or 0 or auto)
/// If no units, assumes it's REM's with PX fallback
/// @param {list} $values - 10 auto 5vh 7.3% => 10px auto 5vh 7.3%, 10rem auto 5vh 7.3%
/// @param {unit} $unit - Unit to add to value
@function unitmap($values, $unit: rem) {

    $ValuesMap: ();

    @each $value in $values {
        @if $value and is-zeroauto($value) or is-length($value) or is-percentage($value) {
            $ValuesMap: append($ValuesMap, $value);
        }

        @else if $value and is-number($value) and unitless($value) {
            @if $unit == "rem" {
                $ValuesMap: append($ValuesMap, rem($value));
            }

            @else {
                $ValuesMap: append($ValuesMap, px($value));
            }
        }
    }

    @return $ValuesMap;
}

/// Returns lineheight value (as unitless pixel size) from leading
/// (Photoshop displays leading value rather than lineheight)
/// @ignore {
///   leadline(Fontsize(27), Leading(24));
///   (27 / 24) = 1.125 lineheight.
///   Instead leadline gives correct 1.25
///   leading - fontsize = x
///   leading + x
/// }
///
/// leading = (lineheight + fontsize) / 2
/// lineheight = (leading * 2) - fontsize
@function leadline($font-size: $TYPE-FontSize, $leading: 20) {
    @if is-number($leading) {

        $diff: $leading - $font-size;

        @return $diff + $leading;
    }

    @else {
        @error "Leading or Fontsize was `#{$leading}` not a number";
    }
}

/// Returns lineheight unitless value from leading
/// Leading is always >= 1
/// lineheight = (leading * 2) - fontsize
@function leadlinepoint($font-size: $TYPE-FontSize, $value: $TYPE-FontSize/2) {
    @if is-number($value) {
        @return 1 + ($value / ($font-size * 2));
    }

    @else {
        @error "Leading or Fontsize was `#{$value}` not a number";
    }
}

/// Darken a colour by mixing it with --black
/// Option to invert: mix --black with the colour (follows Photoshop's opacity logic)
/// @param {color} $value - Input colour
/// @param {percentage} $value - Amount to darken it by
@function shade($color, $percentage, $swap:false) {
    @if $swap {
        @return mix($color, $COLOR-Black, $percentage);
    }

    @else {
        @return mix($COLOR-Black, $color, $percentage);
    }
}

/// Lighten a colour by mixing it with --white
/// Option to invert: add colour to --white (follows Photoshop's opacity logic)
/// @param {color} $color - Input colour
/// @param {percentage} $percentage - Amount to lighten it by
@function tint($color, $percentage, $swap:false) {
    @if $swap {
        @return mix($color, $COLOR-White, $percentage);
    }

    @else {
        @return mix($COLOR-White, $color, $percentage);
    }
}

/// Contrast colours and output a given colour for a given threshold
@function contrast-threshold($base, $threshold: 3, $color1: $planifolia-contrast-dark-default, $color2: $planifolia-contrast-light-default) {
    $contrast1: contrast($base, $color2);
    $contrast2: contrast($base, $color1);

    @if $contrast1 > $threshold {
        @return $color2;
    }

    @else {
        @return $color1;
    }
}

/// Helper function
/// Return null rather than throwing an error if index is outside list range.
@function nth-or-null($list, $index) {
    @return if(length($list) >= $index, nth($list, $index), null);
}

//
//  Function to create an optimized svg url
//
@function svg-url($svg) {
    //
    //  Add missing namespace
    //
    @if not str-index($svg,xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }
    //
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    //
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg) / $slice);

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        //   Encode
        //
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        //
        //    The maybe list
        //
        //    Keep size and compile time down
        //    ... only add on documented fail
        //
        //  $chunk: str-replace($chunk, '|', '%7C');
        //  $chunk: str-replace($chunk, '[', '%5B');
        //  $chunk: str-replace($chunk, ']', '%5D');
        //  $chunk: str-replace($chunk, '^', '%5E');
        //  $chunk: str-replace($chunk, '`', '%60');
        //  $chunk: str-replace($chunk, ';', '%3B');
        //  $chunk: str-replace($chunk, '?', '%3F');
        //  $chunk: str-replace($chunk, ':', '%3A');
        //  $chunk: str-replace($chunk, '@', '%40');
        //  $chunk: str-replace($chunk, '=', '%3D');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml,#{$encoded}");
}

//  Helper function to replace characters in a string
/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @return if($index,
    str-slice($string, 1, $index - 1) + $replace +
    str-replace(str-slice($string, $index +
    str-length($search)), $search, $replace),
    $string);
}

/// Test if `$value` is a number or `auto` - used on margins
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-zeroauto($value) {
    @return $value == 0 or $value == "auto";
}

/// Test if `$value` is a number or `auto` - used on margins
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-numberauto($value) {
    @return is-number($value) or is-zeroauto($value);
}

/// Test if `$value` is a number
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-number($value) {
    @return type-of($value) == 'number';
}

/// Test if `$value` is of a timed duration
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-time($value) {
    @return is-number($value) and index('ms' 's', unit($value)) != null;
}

/// Test if `$value` is of a timed duration
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-duration($value) {
    @return is-time($value);
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-angle($value) {
    @return is-number($value) and index('deg' 'rad' 'grad' 'turn', unit($value)) != null;
}

/// Test if `$value` is a frequency
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-frequency($value) {
    @return is-number($value) and index('Hz' 'kHz', unit($value)) != null;
}

/// Test if `$value` is an integer
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-integer($value) {
    @return is-number($value) and round($value) == $value;
}

/// Test if `$value` is of a relative length
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-relative-length($value) {
    @return is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;
}

/// Test if `$value` is of an absolute length
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-absolute-length($value) {
    @return is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}

/// Test if `$value` is a percentage
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-percentage($value) {
    @return is-number($value) and unit($value) == '%';
}

/// Test if `$value` is a length (relative or absolute) in units
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-length($value) {
    @return is-relative-length($value) or is-absolute-length($value);
}

/// Test if `$value` is a resolution with a unit (eg, dpi)
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-resolution($value) {
    @return is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;
}

/// Test if `$value` is a valid position
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-position($value) {
    @return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;
}

/// Test if `$value` is a valid direction
/// @param {*} $value - Value to test
/// @return {Bool}
/// @access public
@function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

    @return $is-keyword or $is-angle;
}

/// linear-interpolation-rem (outputs in rem not pixels)
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation-rem((320px: 18, 768px: 26));
/// Assumes the font size to be in pixels but unitless.
@function linear-interpolation-rem($map) {
    $keys: map-keys($map);
    @if (length($keys) != 2) {
        @error "linear-interpolation() $map must be exactly 2 values";
    }

    // @warn inspect(nth($keys, 2));
    // @warn inspect(nth($keys, 1));

    // The slope
    // $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1))) / (nth($keys, 2) - nth($keys, 1));
    $m: (px(map-get($map, nth($keys, 2))) - px(map-get($map, nth($keys, 1)))) / (nth($keys, 2) - nth($keys, 1));

    // @warn inspect($m);
    // $m: rem(strip-unit($m));
    // @warn inspect($m);

    // The y-intercept
    $b: px(map-get($map, nth($keys, 1))) - $m * nth($keys, 1);

    // @warn inspect($b);
    // $b: rem(strip-unit($b));

    // Determine if the sign should be positive or negative
    $sign: "+";
    @if ($b < 0) {
        $sign: "-";
        $b: abs($b);
    }

    $b: px2rem($b);

    // @return 10;
    @return calc(#{$m*100}vw #{$sign} #{$b});
}

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function linear-interpolation($map) {
    $keys: map-keys($map);
    @if (length($keys) != 2) {
        @error "linear-interpolation() $map must be exactly 2 values";
    }

    // The slope
    $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1))) / (nth($keys, 2) - nth($keys, 1));

    // The y-intercept
    $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

    // Determine if the sign should be positive or negative
    $sign: "+";
    @if ($b < 0) {
        $sign: "-";
        $b: abs($b);
    }

    @return calc(#{$m*100}vw #{$sign} #{$b});
}

/// map-sort
/// Sort map by keys
/// @param $map - A SASS map
/// @returns A SASS map sorted by keys
/// @requires function list-sort
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort($map) {
    $keys: list-sort(map-keys($map));
    $sortedMap: ();
    @each $key in $keys {
        $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
    }
    @return $sortedMap;
}

/// map-sort-by-value
/// Sort map by values
/// @param $map - A SASS map
/// @returns A SASS map sorted by values
/// @requires function list-sort
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort-by-values($map) {
    // Transform map to zipped list
    $keys: ();
    $values: ();

    @each $key, $val in $map {
        $keys: append($keys, $key);
        $values: append($values, $val);
    }

    $list: zip($keys, $values);

    $sortedMap: ();
    @while length($list) > 0 {

        // Find smallest pair
        $smallestPair: nth($list, 1);
        @each $pair in $list {
            $value: nth($pair, 2);
            $smallestValue: nth($smallestPair, 2);
            @if $value < $smallestValue {
                $smallestPair: $pair;
            }
        }

        // Add smallest pair to sorted map
        $key: nth($smallestPair, 1);
        $value: nth($smallestPair, 2);
        $sortedMap: map-merge($sortedMap, ($key: $value));

        // Remove from list smallest pair
        $smallestPairIndex: index($list, $smallestPair);
        $newList: ();
        @for $i from 1 through length($list) {
            @if $i != $smallestPairIndex {
                $newList: append($newList, nth($list, $i), "space");
            }
        }
        $list: $newList;
    }

    @return $sortedMap;
}

/// list-sort
/// Sort a SASS list
/// @param $list - A SASS list
/// @returns A sorted SASS list
/// @requires function list-remove
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-sort($list) {
    $sortedlist: ();
    @while length($list) > 0 {
        $value: nth($list, 1);
        @each $item in $list {
            @if $item < $value {
                $value: $item;
            }
        }
        $sortedlist: append($sortedlist, $value, 'space');
        $list: list-remove($list, index($list, $value));
    }
    @return $sortedlist;
}

/// list-remove
/// Remove an item from a list
/// @param $list - A SASS list
/// @param $index - The list index to remove
/// @returns A SASS list
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-remove($list, $index) {
    $newList: ();
    @for $i from 1 through length($list) {
        @if $i != $index {
            $newList: append($newList, nth($list, $i), 'space');
        }
    }
    @return $newList;
}

/// Sass List Functions
/// ------------------------------------------------
/// @author Hugo Giraudel
/// @link https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#replacing-values-from-list
@function first($list) {
    @return nth($list, 1);
}

@function last($list) {
    @return nth($list, length($list));
}

/**
 * Last-index v2
 * Less beautiful code
 * Better performance
 */
@function last-index($list, $value) {
    @for $i from length($list) *-1 through -1 {
        @if nth($list, abs($i)) == $value {
            @return abs($i);
        }
    }

    @return null;
}

// Prepend
@function prepend($list, $value) {
    @return join($value, $list);
}

@function insert-nth($list, $index, $value) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
    }
    @else if $index < 1 {
        @warn "List index 0 must be a non-zero integer for `insert-nth`";
    }
    @else if $index > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
    }
    @else {
        $result: ();

        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }

            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

// Replace in list

@function replace($list, $old-value, $new-value, $recursive: false) {
    $result: ();

    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
            $result: append(
                $result,
                replace(nth($list, $i), $old-value, $new-value, $recursive)
            );
        }
        @else {
            @if nth($list, $i) == $old-value {
                $result: append($result, $new-value);
            }
            @else {
                $result: append($result, nth($list, $i));
            }
        }
    }

    @return $result;
}

// Replace in list at index
@function replace-nth($list, $index, $value) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
    }
    @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `replace-nth`.";
    }
    @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
    }
    @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);

        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }
            @else {
                $result: append($result, nth($list, $i));
            }
        }
    }

    @return $result;
}

// Removing values
@function remove($list, $value, $recursive: false) {
    $result: ();

    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
            $result: append($result, remove(nth($list, $i), $value, $recursive));
        }
        @else if nth($list, $i) != $value {
            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

// Removing values at nth index
@function remove-nth($list, $index) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
    }
    @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `remove-nth`.";
    }
    @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
    }
    @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);

        @for $i from 1 through length($list) {
            @if $i != $index {
                $result: append($result, nth($list, $i));
            }
        }
    }

    @return $result;
}

// Slicing list
@function slice($list, $start: 1, $end: length($list)) {
    $result: null;

    @if type-of($start) != number or type-of($end) != number {
        @warn "Either $start or $end are not a number for `slice`.";
    }

    @else if $start > $end {
        @warn "The start index has to be lesser than or equals to the end index for `slice`.";
    }

    @else if $start < 1 or $end < 1 {
        @warn "List indexes must be non-zero integers for `slice`.";
    }

    @else if $start > length($list) {
        @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
    }

    @else if $end > length($list) {
        @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
    }

    @else {
        $result: ();

        @for $i from $start through $end {
            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

// Reverse list
@function reverse($list, $recursive: false) {
    $result: ();

    @for $i from length($list) *-1 through -1 {
        @if type-of(nth($list, abs($i))) == list and $recursive {
            $result: append($result, reverse(nth($list, abs($i)), $recursive));
        }
        @else {
            $result: append($result, nth($list, abs($i)));
        }
    }

    @return $result;
}

// List to string
@function to-string($list, $glue: '', $is-nested: false) {
    $result: null;

    @for $i from 1 through length($list) {
        $e: nth($list, $i);

        @if type-of($e) == list {
            $result: $result#{to-string($e, $glue, true)};
        }
        @else {
            $result: if(
                $i != length($list) or $is-nested,
                $result#{$e}#{$glue},
                $result#{$e}
            );
        }
    }

    @return $result;
}

// Shift indexes of a list
// @Ada Tudor
@function loop($list, $value: 1) {
    $result: ();

    @for $i from 0 to length($list) {
        $result: append($result, nth($list, ($i - $value) % length($list) + 1));
    }

    @return $result;
}
